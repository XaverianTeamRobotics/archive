TODO: c/c++ support
TODO: take inspiration from mike
TODO: unfork
TODO: add notifs for state changes in upstream once unforked since we wont get them anymore
TODO: remove the random guides folder in branch root, should be in gh-pages
TODO: driving system:
    - odometry
    - road runner impl and wrappers
    - dead wheels
    - mech, swivel, tank, car, etc. support
    - VSLAM
    - wrap everything in such a way that a coordinate and rotation can be given to the robot to drive it to a certain location, with the apex in the center of the field and a window of [ -100[.0], 100[.0] ] in both the x and y axes and the robot will drive to said location in the smoothest path possible, avoiding obstacles in its environment - base coords on /FtcRobotController.src.main.java.org.firstinspires.ftc.robotcontroller.external.samples.FTC_FieldCoordinateSystemDefintion.pdf
    - implement all of this into a tele op system as well
TODO: misc motion planning:
    - implement odometry in a general fashion for controlling other motors, servos, etc.
    - implement feedforward for things like gravity, friction, etc.
    - implement proper encoding without using builtin encoders
TODO: servos:
    - make servos smarter so they know their position, likely with an encoder and pid loop
TODO: misc:
    - wrappers to control as much hardware as possible
    - refactors to misc classes
    - refactors to autonomous control, queueing, easier impl of things, stuff like that
    - refactors to telemetry including adding acme dash
    - refactors to gamepads maybe? probably just add ways to set functions on the fly or get specific gamepads, not functional ones (or maybe a psuedo gamepad which refers to all gamepads if multi-gamepad i/o is needed) -- DO THIS NEXT, INTRGRATE THIS INTO ENVIRONMENT VARIABLES
    - led control
    - refactor custom devices maybe
    - class jdocs have accurate author tags and all that good meta stuff
TODO: vision
    - implement opencv, tensorflow, vuforia, etc. into one, easy to use wrapper
    - make everything stupidly easy
    - add custom training data maybe if needed
TODO: io
    - basically, there will be a robot class thats instantiated on every opmode run. it will load the classes found in the config package, like the hardware name config, odometry tuning config, etc -- it will save as an env var
    - make i/o stupidly easy, remove spaces & locations and use raw hardware wrappers
TODO: testing
    - proprietary robot simulator
    - roight propah testin librarie jams vroom vroom exoohust foumme
    - auto smoke tests
    - auto unit tests
    - auto integration tests
TODO: building
    - wireless building
    - more workflows for building like wireless automated building
TODO: workflow
    - more automation
    - issues
    - projects
    - fix all workflows, esp. jdoc
    - add some new ones for building, testing, etc.
    - proper auth keys
    - proper security-- people can't just go make workflows, push to master without approval, push to dev without approval, make branches, etc.
TODO: docs
    - proper documentation
    - dev env installation, intro coding, and other tutorials
    - impl jdoc into main doc hub
    - docs to write docs
    - write docs in mkdown in origin/docs
    - workflows for docs
TODO: anything else i think of
